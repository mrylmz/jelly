(
    ROOT = AST_BLOCK(
        STATEMENTS = [
            AST_FUNC(
                SIGNATURE = AST_FUNC_SIGNATURE(
                    NAME = AST_IDENTIFIER(
                        TEXT = STRING(fibonacci)
                    )
                    PARAMETERS = [
                        AST_PARAMETER(
                            NAME = AST_IDENTIFIER(
                                TEXT = STRING(n)
                            )
                            TYPE = AST_TYPE(
                                KIND = AST_IDENTIFIER(
                                    TEXT = STRING(Int)
                                )
                            )
                        )
                    ]
                    RETURN_TYPE = AST_TYPE(
                        KIND = AST_IDENTIFIER(
                            TEXT = STRING(Int)
                        )
                    )
                )
                BLOCK = AST_BLOCK(
                    STATEMENTS = [
                        AST_IF(
                            CONDITIONS = [
                                AST_BINARY(
                                    OPERATOR = <
                                    LEFT = AST_IDENTIFIER(
                                        TEXT = STRING(n)
                                    )
                                    RIGHT = AST_LITERAL(
                                        VALUE = INT(2)
                                    )
                                )
                            ]
                            BLOCK = AST_BLOCK(
                                STATEMENTS = [
                                    AST_CONTROL(
                                        KIND = RETURN(
                                            AST_IDENTIFIER(
                                                TEXT = STRING(n)
                                            )
                                        )
                                    )
                                ]
                            )
                            ELSE = NULL()
                        )
                        AST_CONTROL(
                            KIND = RETURN(
                                AST_BINARY(
                                    OPERATOR = +
                                    LEFT = AST_CALL(
                                        LEFT = AST_IDENTIFIER(
                                            TEXT = STRING(fibonacci)
                                        )
                                        ARGUMENTS = [
                                            AST_BINARY(
                                                OPERATOR = -
                                                LEFT = AST_IDENTIFIER(
                                                    TEXT = STRING(n)
                                                )
                                                RIGHT = AST_LITERAL(
                                                    VALUE = INT(1)
                                                )
                                            )
                                        ]
                                    )
                                    RIGHT = AST_CALL(
                                        LEFT = AST_IDENTIFIER(
                                            TEXT = STRING(fibonacci)
                                        )
                                        ARGUMENTS = [
                                            AST_BINARY(
                                                OPERATOR = -
                                                LEFT = AST_IDENTIFIER(
                                                    TEXT = STRING(n)
                                                )
                                                RIGHT = AST_LITERAL(
                                                    VALUE = INT(2)
                                                )
                                            )
                                        ]
                                    )
                                )
                            )
                        )
                    ]
                )
            )
        ]
    )
)
